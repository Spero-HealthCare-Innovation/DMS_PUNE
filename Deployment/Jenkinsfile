pipeline {
    agent any
    
    options {
        skipDefaultCheckout(true)
    }


    environment {
        GIT_REPO_URL = 'https://github.com/Spero-HealthCare-Innovation/DMS_PUNE.git'
        GIT_BRANCH = 'main'
        TARGET_DIR = '/var/www/html/DMS_project/DMS_PUNE'
        
    } 

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    sh '''
                        if [ ! -d "${TARGET_DIR}" ]; then
                            echo "Directory does not exist. Creating ${TARGET_DIR}..."
                            sudo -S mkdir -p "${TARGET_DIR}" < /dev/null
                            sudo -S chown -R jenkins:jenkins "${TARGET_DIR}" < /dev/null
                            sudo -S chmod -R 775 "${TARGET_DIR}" < /dev/null
                        else
                            echo "Directory already exists. Skipping creation."
                        fi
                    '''
                }
            }
        }

        stage('Clone or Reset Repository') {
            steps {
                dir("${TARGET_DIR}") {
                    script {
                        if (!fileExists('.git')) {
                            echo "Cloning repository into ${TARGET_DIR}..."
                            sh """
                                git clone -b ${GIT_BRANCH} ${GIT_REPO_URL} .
                               
                            """
                        } else {
                            echo "Repository already exists. Pulling latest changes..."
                            sh """
                                git config --global --add safe.directory \$(pwd)
                                git fetch origin ${GIT_BRANCH}
                                git reset --hard origin/${GIT_BRANCH}
                                git clean -fd -e vvenv/
                               

                            """
                        }
                    }
                }
            }
        }

        stage('Archive Code Snapshot') {
            steps {
                script {
                    def timestamp = sh(script: "date +%Y-%m-%d_%H-%M-%S", returnStdout: true).trim()
                    def backupDir = "/var/www/html/DMS_project/DMS_backups/DMS_PUNE_${timestamp}"
                    sh """
                        echo "Creating backup at ${backupDir}"
                        mkdir -p ${backupDir}
                        cp -r ${TARGET_DIR}/* ${backupDir}/
                        echo "Backup created successfully"
                    """
                }
            }
        }
        stage('Backup PostgreSQL Database') {
            environment {
                PGHOST = '122.176.232.35'
                PGPORT = '5433'
                PGUSER = 'postgres'
                PGDATABASE = 'DMS_GOA_DB_2025'
                BACKUP_DIR = '/var/www/html/DMS_project/db_backups'
                PGPASSWORD = 'spero@123#2025$'
            }
            steps {
                script {
                    def timestamp = sh(script: "date +%Y-%m-%d_%H-%M-%S", returnStdout: true).trim()
                    def backupFile = "${BACKUP_DIR}/${PGDATABASE}_backup_${timestamp}.sql"
                    def errorFile = "${BACKUP_DIR}/backup_error_${timestamp}.log"

                    sh """
                        echo "=== Starting DB backup at: \$(date) ==="
                        echo "Host: ${PGHOST}"
                        echo "Port: ${PGPORT}"
                        echo "User: ${PGUSER}"
                        echo "Database: ${PGDATABASE}"
                        echo "Backup file: ${backupFile}"
                        
                        mkdir -p ${BACKUP_DIR}
                        export PGPASSWORD='${PGPASSWORD}'
                        
                        pg_dump -h ${PGHOST} -p ${PGPORT} -U ${PGUSER} -F p -d ${PGDATABASE} -f ${backupFile} 2> ${errorFile}
                        
                        BACKUP_STATUS=\$?
                        if [ \$BACKUP_STATUS -ne 0 ]; then
                            echo "❌ pg_dump failed. See error log:"
                            cat ${errorFile}
                            exit 1
                        else
                            echo "✅ Database backup completed at ${backupFile}"
                        fi
                    """
                }
            }
        }




        stage('Fix Permissions') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        sudo chown -R jenkins:dmsgroup .
                        sudo chmod -R 775 .
                        sudo find . -type d -exec chmod g+s {} \\;
                    '''
                }
            }
        }


        stage('Check Files') {
            steps {
                dir("${TARGET_DIR}") {
                    sh "ls -al"
                }
            }
        }

        stage('Setup Python Virtual ENV for dependencies') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        chmod +x Deployment/envsetup.sh
                        Deployment/envsetup.sh
                    '''
                }
            }
        }

        stage('Creating React Production Build') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        chmod +x Deployment/react_vite.sh
                        Deployment/react_vite.sh
                    '''
                }
            }
        }
 
        stage('Setup Gunicorn') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        chmod +x Deployment/gunicorn.sh
                        Deployment/gunicorn.sh
                    '''
                }
            }
        }

        stage('Setup Fastapi') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        chmod +x Deployment/fastapi.sh
                        Deployment/fastapi.sh
                    '''
                }
            }
        }
 
        stage('Setup NGINX') {
            steps {
                dir("${TARGET_DIR}") {
                    sh '''
                        chmod +x Deployment/nginx.sh
                        Deployment/nginx.sh
                    '''
                }
            }
        }
    } 

    post {
        success {
            echo 'Build was successful!'
        }
        failure {
            echo 'Build failed. Please check the logs.'
        }
    }
}
